// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VFullEmployee is an object representing the database table.
type VFullEmployee struct {
	EmpNo      int                  `boil:"emp_no" json:"emp_no" toml:"emp_no" yaml:"emp_no"`
	FirstName  string               `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName   string               `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	BirthDate  time.Time            `boil:"birth_date" json:"birth_date" toml:"birth_date" yaml:"birth_date"`
	Gender     VFullEmployeesGender `boil:"gender" json:"gender" toml:"gender" yaml:"gender"`
	HireDate   time.Time            `boil:"hire_date" json:"hire_date" toml:"hire_date" yaml:"hire_date"`
	Department null.String          `boil:"department" json:"department,omitempty" toml:"department" yaml:"department,omitempty"`
}

var VFullEmployeeColumns = struct {
	EmpNo      string
	FirstName  string
	LastName   string
	BirthDate  string
	Gender     string
	HireDate   string
	Department string
}{
	EmpNo:      "emp_no",
	FirstName:  "first_name",
	LastName:   "last_name",
	BirthDate:  "birth_date",
	Gender:     "gender",
	HireDate:   "hire_date",
	Department: "department",
}

var VFullEmployeeTableColumns = struct {
	EmpNo      string
	FirstName  string
	LastName   string
	BirthDate  string
	Gender     string
	HireDate   string
	Department string
}{
	EmpNo:      "v_full_employees.emp_no",
	FirstName:  "v_full_employees.first_name",
	LastName:   "v_full_employees.last_name",
	BirthDate:  "v_full_employees.birth_date",
	Gender:     "v_full_employees.gender",
	HireDate:   "v_full_employees.hire_date",
	Department: "v_full_employees.department",
}

// Generated where

type whereHelperVFullEmployeesGender struct{ field string }

func (w whereHelperVFullEmployeesGender) EQ(x VFullEmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperVFullEmployeesGender) NEQ(x VFullEmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperVFullEmployeesGender) LT(x VFullEmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperVFullEmployeesGender) LTE(x VFullEmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperVFullEmployeesGender) GT(x VFullEmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperVFullEmployeesGender) GTE(x VFullEmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperVFullEmployeesGender) IN(slice []VFullEmployeesGender) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperVFullEmployeesGender) NIN(slice []VFullEmployeesGender) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var VFullEmployeeWhere = struct {
	EmpNo      whereHelperint
	FirstName  whereHelperstring
	LastName   whereHelperstring
	BirthDate  whereHelpertime_Time
	Gender     whereHelperVFullEmployeesGender
	HireDate   whereHelpertime_Time
	Department whereHelpernull_String
}{
	EmpNo:      whereHelperint{field: "`v_full_employees`.`emp_no`"},
	FirstName:  whereHelperstring{field: "`v_full_employees`.`first_name`"},
	LastName:   whereHelperstring{field: "`v_full_employees`.`last_name`"},
	BirthDate:  whereHelpertime_Time{field: "`v_full_employees`.`birth_date`"},
	Gender:     whereHelperVFullEmployeesGender{field: "`v_full_employees`.`gender`"},
	HireDate:   whereHelpertime_Time{field: "`v_full_employees`.`hire_date`"},
	Department: whereHelpernull_String{field: "`v_full_employees`.`department`"},
}

var (
	vFullEmployeeAllColumns            = []string{"emp_no", "first_name", "last_name", "birth_date", "gender", "hire_date", "department"}
	vFullEmployeeColumnsWithoutDefault = []string{"emp_no", "first_name", "last_name", "birth_date", "gender", "hire_date", "department"}
	vFullEmployeeColumnsWithDefault    = []string{}
	vFullEmployeePrimaryKeyColumns     = []string{}
	vFullEmployeeGeneratedColumns      = []string{}
)

type (
	// VFullEmployeeSlice is an alias for a slice of pointers to VFullEmployee.
	// This should almost always be used instead of []VFullEmployee.
	VFullEmployeeSlice []*VFullEmployee
	// VFullEmployeeHook is the signature for custom VFullEmployee hook methods
	VFullEmployeeHook func(context.Context, boil.ContextExecutor, *VFullEmployee) error

	vFullEmployeeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vFullEmployeeType           = reflect.TypeOf(&VFullEmployee{})
	vFullEmployeeMapping        = queries.MakeStructMapping(vFullEmployeeType)
	vFullEmployeeInsertCacheMut sync.RWMutex
	vFullEmployeeInsertCache    = make(map[string]insertCache)
	vFullEmployeeUpdateCacheMut sync.RWMutex
	vFullEmployeeUpdateCache    = make(map[string]updateCache)
	vFullEmployeeUpsertCacheMut sync.RWMutex
	vFullEmployeeUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var vFullEmployeeAfterSelectHooks []VFullEmployeeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VFullEmployee) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vFullEmployeeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVFullEmployeeHook registers your hook function for all future operations.
func AddVFullEmployeeHook(hookPoint boil.HookPoint, vFullEmployeeHook VFullEmployeeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vFullEmployeeAfterSelectHooks = append(vFullEmployeeAfterSelectHooks, vFullEmployeeHook)
	}
}

// One returns a single vFullEmployee record from the query.
func (q vFullEmployeeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VFullEmployee, error) {
	o := &VFullEmployee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for v_full_employees")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VFullEmployee records from the query.
func (q vFullEmployeeQuery) All(ctx context.Context, exec boil.ContextExecutor) (VFullEmployeeSlice, error) {
	var o []*VFullEmployee

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to VFullEmployee slice")
	}

	if len(vFullEmployeeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VFullEmployee records in the query.
func (q vFullEmployeeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count v_full_employees rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vFullEmployeeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if v_full_employees exists")
	}

	return count > 0, nil
}

// VFullEmployees retrieves all the records using an executor.
func VFullEmployees(mods ...qm.QueryMod) vFullEmployeeQuery {
	mods = append(mods, qm.From("`v_full_employees`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`v_full_employees`.*"})
	}

	return vFullEmployeeQuery{q}
}
