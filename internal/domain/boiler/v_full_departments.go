// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// VFullDepartment is an object representing the database table.
type VFullDepartment struct {
	DeptNo   string      `boil:"dept_no" json:"dept_no" toml:"dept_no" yaml:"dept_no"`
	DeptName string      `boil:"dept_name" json:"dept_name" toml:"dept_name" yaml:"dept_name"`
	Manager  null.String `boil:"manager" json:"manager,omitempty" toml:"manager" yaml:"manager,omitempty"`
}

var VFullDepartmentColumns = struct {
	DeptNo   string
	DeptName string
	Manager  string
}{
	DeptNo:   "dept_no",
	DeptName: "dept_name",
	Manager:  "manager",
}

var VFullDepartmentTableColumns = struct {
	DeptNo   string
	DeptName string
	Manager  string
}{
	DeptNo:   "v_full_departments.dept_no",
	DeptName: "v_full_departments.dept_name",
	Manager:  "v_full_departments.manager",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var VFullDepartmentWhere = struct {
	DeptNo   whereHelperstring
	DeptName whereHelperstring
	Manager  whereHelpernull_String
}{
	DeptNo:   whereHelperstring{field: "`v_full_departments`.`dept_no`"},
	DeptName: whereHelperstring{field: "`v_full_departments`.`dept_name`"},
	Manager:  whereHelpernull_String{field: "`v_full_departments`.`manager`"},
}

var (
	vFullDepartmentAllColumns            = []string{"dept_no", "dept_name", "manager"}
	vFullDepartmentColumnsWithoutDefault = []string{"dept_no", "dept_name", "manager"}
	vFullDepartmentColumnsWithDefault    = []string{}
	vFullDepartmentPrimaryKeyColumns     = []string{}
	vFullDepartmentGeneratedColumns      = []string{}
)

type (
	// VFullDepartmentSlice is an alias for a slice of pointers to VFullDepartment.
	// This should almost always be used instead of []VFullDepartment.
	VFullDepartmentSlice []*VFullDepartment
	// VFullDepartmentHook is the signature for custom VFullDepartment hook methods
	VFullDepartmentHook func(context.Context, boil.ContextExecutor, *VFullDepartment) error

	vFullDepartmentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	vFullDepartmentType           = reflect.TypeOf(&VFullDepartment{})
	vFullDepartmentMapping        = queries.MakeStructMapping(vFullDepartmentType)
	vFullDepartmentInsertCacheMut sync.RWMutex
	vFullDepartmentInsertCache    = make(map[string]insertCache)
	vFullDepartmentUpdateCacheMut sync.RWMutex
	vFullDepartmentUpdateCache    = make(map[string]updateCache)
	vFullDepartmentUpsertCacheMut sync.RWMutex
	vFullDepartmentUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var vFullDepartmentAfterSelectHooks []VFullDepartmentHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *VFullDepartment) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range vFullDepartmentAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVFullDepartmentHook registers your hook function for all future operations.
func AddVFullDepartmentHook(hookPoint boil.HookPoint, vFullDepartmentHook VFullDepartmentHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		vFullDepartmentAfterSelectHooks = append(vFullDepartmentAfterSelectHooks, vFullDepartmentHook)
	}
}

// One returns a single vFullDepartment record from the query.
func (q vFullDepartmentQuery) One(ctx context.Context, exec boil.ContextExecutor) (*VFullDepartment, error) {
	o := &VFullDepartment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for v_full_departments")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all VFullDepartment records from the query.
func (q vFullDepartmentQuery) All(ctx context.Context, exec boil.ContextExecutor) (VFullDepartmentSlice, error) {
	var o []*VFullDepartment

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to VFullDepartment slice")
	}

	if len(vFullDepartmentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all VFullDepartment records in the query.
func (q vFullDepartmentQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count v_full_departments rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q vFullDepartmentQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if v_full_departments exists")
	}

	return count > 0, nil
}

// VFullDepartments retrieves all the records using an executor.
func VFullDepartments(mods ...qm.QueryMod) vFullDepartmentQuery {
	mods = append(mods, qm.From("`v_full_departments`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`v_full_departments`.*"})
	}

	return vFullDepartmentQuery{q}
}
