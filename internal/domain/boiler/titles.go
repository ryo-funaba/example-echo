// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Title is an object representing the database table.
type Title struct {
	EmpNo    int       `boil:"emp_no" json:"emp_no" toml:"emp_no" yaml:"emp_no"`
	Title    string    `boil:"title" json:"title" toml:"title" yaml:"title"`
	FromDate time.Time `boil:"from_date" json:"from_date" toml:"from_date" yaml:"from_date"`
	ToDate   null.Time `boil:"to_date" json:"to_date,omitempty" toml:"to_date" yaml:"to_date,omitempty"`

	R *titleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L titleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TitleColumns = struct {
	EmpNo    string
	Title    string
	FromDate string
	ToDate   string
}{
	EmpNo:    "emp_no",
	Title:    "title",
	FromDate: "from_date",
	ToDate:   "to_date",
}

var TitleTableColumns = struct {
	EmpNo    string
	Title    string
	FromDate string
	ToDate   string
}{
	EmpNo:    "titles.emp_no",
	Title:    "titles.title",
	FromDate: "titles.from_date",
	ToDate:   "titles.to_date",
}

// Generated where

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var TitleWhere = struct {
	EmpNo    whereHelperint
	Title    whereHelperstring
	FromDate whereHelpertime_Time
	ToDate   whereHelpernull_Time
}{
	EmpNo:    whereHelperint{field: "`titles`.`emp_no`"},
	Title:    whereHelperstring{field: "`titles`.`title`"},
	FromDate: whereHelpertime_Time{field: "`titles`.`from_date`"},
	ToDate:   whereHelpernull_Time{field: "`titles`.`to_date`"},
}

// TitleRels is where relationship names are stored.
var TitleRels = struct {
	EmpNoEmployee string
}{
	EmpNoEmployee: "EmpNoEmployee",
}

// titleR is where relationships are stored.
type titleR struct {
	EmpNoEmployee *Employee `boil:"EmpNoEmployee" json:"EmpNoEmployee" toml:"EmpNoEmployee" yaml:"EmpNoEmployee"`
}

// NewStruct creates a new relationship struct
func (*titleR) NewStruct() *titleR {
	return &titleR{}
}

func (r *titleR) GetEmpNoEmployee() *Employee {
	if r == nil {
		return nil
	}
	return r.EmpNoEmployee
}

// titleL is where Load methods for each relationship are stored.
type titleL struct{}

var (
	titleAllColumns            = []string{"emp_no", "title", "from_date", "to_date"}
	titleColumnsWithoutDefault = []string{"emp_no", "title", "from_date", "to_date"}
	titleColumnsWithDefault    = []string{}
	titlePrimaryKeyColumns     = []string{"emp_no", "title", "from_date"}
	titleGeneratedColumns      = []string{}
)

type (
	// TitleSlice is an alias for a slice of pointers to Title.
	// This should almost always be used instead of []Title.
	TitleSlice []*Title
	// TitleHook is the signature for custom Title hook methods
	TitleHook func(context.Context, boil.ContextExecutor, *Title) error

	titleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	titleType                 = reflect.TypeOf(&Title{})
	titleMapping              = queries.MakeStructMapping(titleType)
	titlePrimaryKeyMapping, _ = queries.BindMapping(titleType, titleMapping, titlePrimaryKeyColumns)
	titleInsertCacheMut       sync.RWMutex
	titleInsertCache          = make(map[string]insertCache)
	titleUpdateCacheMut       sync.RWMutex
	titleUpdateCache          = make(map[string]updateCache)
	titleUpsertCacheMut       sync.RWMutex
	titleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var titleAfterSelectHooks []TitleHook

var titleBeforeInsertHooks []TitleHook
var titleAfterInsertHooks []TitleHook

var titleBeforeUpdateHooks []TitleHook
var titleAfterUpdateHooks []TitleHook

var titleBeforeDeleteHooks []TitleHook
var titleAfterDeleteHooks []TitleHook

var titleBeforeUpsertHooks []TitleHook
var titleAfterUpsertHooks []TitleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Title) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range titleAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Title) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range titleBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Title) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range titleAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Title) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range titleBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Title) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range titleAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Title) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range titleBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Title) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range titleAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Title) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range titleBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Title) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range titleAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTitleHook registers your hook function for all future operations.
func AddTitleHook(hookPoint boil.HookPoint, titleHook TitleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		titleAfterSelectHooks = append(titleAfterSelectHooks, titleHook)
	case boil.BeforeInsertHook:
		titleBeforeInsertHooks = append(titleBeforeInsertHooks, titleHook)
	case boil.AfterInsertHook:
		titleAfterInsertHooks = append(titleAfterInsertHooks, titleHook)
	case boil.BeforeUpdateHook:
		titleBeforeUpdateHooks = append(titleBeforeUpdateHooks, titleHook)
	case boil.AfterUpdateHook:
		titleAfterUpdateHooks = append(titleAfterUpdateHooks, titleHook)
	case boil.BeforeDeleteHook:
		titleBeforeDeleteHooks = append(titleBeforeDeleteHooks, titleHook)
	case boil.AfterDeleteHook:
		titleAfterDeleteHooks = append(titleAfterDeleteHooks, titleHook)
	case boil.BeforeUpsertHook:
		titleBeforeUpsertHooks = append(titleBeforeUpsertHooks, titleHook)
	case boil.AfterUpsertHook:
		titleAfterUpsertHooks = append(titleAfterUpsertHooks, titleHook)
	}
}

// One returns a single title record from the query.
func (q titleQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Title, error) {
	o := &Title{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for titles")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Title records from the query.
func (q titleQuery) All(ctx context.Context, exec boil.ContextExecutor) (TitleSlice, error) {
	var o []*Title

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Title slice")
	}

	if len(titleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Title records in the query.
func (q titleQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count titles rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q titleQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if titles exists")
	}

	return count > 0, nil
}

// EmpNoEmployee pointed to by the foreign key.
func (o *Title) EmpNoEmployee(mods ...qm.QueryMod) employeeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`emp_no` = ?", o.EmpNo),
	}

	queryMods = append(queryMods, mods...)

	return Employees(queryMods...)
}

// LoadEmpNoEmployee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (titleL) LoadEmpNoEmployee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTitle interface{}, mods queries.Applicator) error {
	var slice []*Title
	var object *Title

	if singular {
		var ok bool
		object, ok = maybeTitle.(*Title)
		if !ok {
			object = new(Title)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTitle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTitle))
			}
		}
	} else {
		s, ok := maybeTitle.(*[]*Title)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTitle)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTitle))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &titleR{}
		}
		args = append(args, object.EmpNo)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &titleR{}
			}

			for _, a := range args {
				if a == obj.EmpNo {
					continue Outer
				}
			}

			args = append(args, obj.EmpNo)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`employees`),
		qm.WhereIn(`employees.emp_no in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Employee")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Employee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employees")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EmpNoEmployee = foreign
		if foreign.R == nil {
			foreign.R = &employeeR{}
		}
		foreign.R.EmpNoTitles = append(foreign.R.EmpNoTitles, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EmpNo == foreign.EmpNo {
				local.R.EmpNoEmployee = foreign
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.EmpNoTitles = append(foreign.R.EmpNoTitles, local)
				break
			}
		}
	}

	return nil
}

// SetEmpNoEmployee of the title to the related item.
// Sets o.R.EmpNoEmployee to related.
// Adds o to related.R.EmpNoTitles.
func (o *Title) SetEmpNoEmployee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Employee) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `titles` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"emp_no"}),
		strmangle.WhereClause("`", "`", 0, titlePrimaryKeyColumns),
	)
	values := []interface{}{related.EmpNo, o.EmpNo, o.Title, o.FromDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EmpNo = related.EmpNo
	if o.R == nil {
		o.R = &titleR{
			EmpNoEmployee: related,
		}
	} else {
		o.R.EmpNoEmployee = related
	}

	if related.R == nil {
		related.R = &employeeR{
			EmpNoTitles: TitleSlice{o},
		}
	} else {
		related.R.EmpNoTitles = append(related.R.EmpNoTitles, o)
	}

	return nil
}

// Titles retrieves all the records using an executor.
func Titles(mods ...qm.QueryMod) titleQuery {
	mods = append(mods, qm.From("`titles`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`titles`.*"})
	}

	return titleQuery{q}
}

// FindTitle retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTitle(ctx context.Context, exec boil.ContextExecutor, empNo int, title string, fromDate time.Time, selectCols ...string) (*Title, error) {
	titleObj := &Title{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `titles` where `emp_no`=? AND `title`=? AND `from_date`=?", sel,
	)

	q := queries.Raw(query, empNo, title, fromDate)

	err := q.Bind(ctx, exec, titleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from titles")
	}

	if err = titleObj.doAfterSelectHooks(ctx, exec); err != nil {
		return titleObj, err
	}

	return titleObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Title) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no titles provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(titleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	titleInsertCacheMut.RLock()
	cache, cached := titleInsertCache[key]
	titleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			titleAllColumns,
			titleColumnsWithDefault,
			titleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(titleType, titleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(titleType, titleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `titles` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `titles` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `titles` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, titlePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into titles")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.EmpNo,
		o.Title,
		o.FromDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for titles")
	}

CacheNoHooks:
	if !cached {
		titleInsertCacheMut.Lock()
		titleInsertCache[key] = cache
		titleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Title.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Title) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	titleUpdateCacheMut.RLock()
	cache, cached := titleUpdateCache[key]
	titleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			titleAllColumns,
			titlePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update titles, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `titles` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, titlePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(titleType, titleMapping, append(wl, titlePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update titles row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for titles")
	}

	if !cached {
		titleUpdateCacheMut.Lock()
		titleUpdateCache[key] = cache
		titleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q titleQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for titles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for titles")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TitleSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), titlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `titles` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, titlePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in title slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all title")
	}
	return rowsAff, nil
}

var mySQLTitleUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Title) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no titles provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(titleColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLTitleUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	titleUpsertCacheMut.RLock()
	cache, cached := titleUpsertCache[key]
	titleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			titleAllColumns,
			titleColumnsWithDefault,
			titleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			titleAllColumns,
			titlePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert titles, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`titles`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `titles` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(titleType, titleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(titleType, titleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for titles")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(titleType, titleMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for titles")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for titles")
	}

CacheNoHooks:
	if !cached {
		titleUpsertCacheMut.Lock()
		titleUpsertCache[key] = cache
		titleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Title record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Title) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Title provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), titlePrimaryKeyMapping)
	sql := "DELETE FROM `titles` WHERE `emp_no`=? AND `title`=? AND `from_date`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from titles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for titles")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q titleQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no titleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from titles")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for titles")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TitleSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(titleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), titlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `titles` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, titlePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from title slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for titles")
	}

	if len(titleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Title) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTitle(ctx, exec, o.EmpNo, o.Title, o.FromDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TitleSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TitleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), titlePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `titles`.* FROM `titles` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, titlePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in TitleSlice")
	}

	*o = slice

	return nil
}

// TitleExists checks if the Title row exists.
func TitleExists(ctx context.Context, exec boil.ContextExecutor, empNo int, title string, fromDate time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `titles` where `emp_no`=? AND `title`=? AND `from_date`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, empNo, title, fromDate)
	}
	row := exec.QueryRowContext(ctx, sql, empNo, title, fromDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if titles exists")
	}

	return exists, nil
}

// Exists checks if the Title row exists.
func (o *Title) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TitleExists(ctx, exec, o.EmpNo, o.Title, o.FromDate)
}
