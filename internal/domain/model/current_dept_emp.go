// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CurrentDeptEmp is an object representing the database table.
type CurrentDeptEmp struct {
	EmpNo    int       `boil:"emp_no" json:"emp_no" toml:"emp_no" yaml:"emp_no"`
	DeptNo   string    `boil:"dept_no" json:"dept_no" toml:"dept_no" yaml:"dept_no"`
	FromDate null.Time `boil:"from_date" json:"from_date,omitempty" toml:"from_date" yaml:"from_date,omitempty"`
	ToDate   null.Time `boil:"to_date" json:"to_date,omitempty" toml:"to_date" yaml:"to_date,omitempty"`
}

var CurrentDeptEmpColumns = struct {
	EmpNo    string
	DeptNo   string
	FromDate string
	ToDate   string
}{
	EmpNo:    "emp_no",
	DeptNo:   "dept_no",
	FromDate: "from_date",
	ToDate:   "to_date",
}

var CurrentDeptEmpTableColumns = struct {
	EmpNo    string
	DeptNo   string
	FromDate string
	ToDate   string
}{
	EmpNo:    "current_dept_emp.emp_no",
	DeptNo:   "current_dept_emp.dept_no",
	FromDate: "current_dept_emp.from_date",
	ToDate:   "current_dept_emp.to_date",
}

// Generated where

var CurrentDeptEmpWhere = struct {
	EmpNo    whereHelperint
	DeptNo   whereHelperstring
	FromDate whereHelpernull_Time
	ToDate   whereHelpernull_Time
}{
	EmpNo:    whereHelperint{field: "`current_dept_emp`.`emp_no`"},
	DeptNo:   whereHelperstring{field: "`current_dept_emp`.`dept_no`"},
	FromDate: whereHelpernull_Time{field: "`current_dept_emp`.`from_date`"},
	ToDate:   whereHelpernull_Time{field: "`current_dept_emp`.`to_date`"},
}

var (
	currentDeptEmpAllColumns            = []string{"emp_no", "dept_no", "from_date", "to_date"}
	currentDeptEmpColumnsWithoutDefault = []string{"emp_no", "dept_no", "from_date", "to_date"}
	currentDeptEmpColumnsWithDefault    = []string{}
	currentDeptEmpPrimaryKeyColumns     = []string{}
	currentDeptEmpGeneratedColumns      = []string{}
)

type (
	// CurrentDeptEmpSlice is an alias for a slice of pointers to CurrentDeptEmp.
	// This should almost always be used instead of []CurrentDeptEmp.
	CurrentDeptEmpSlice []*CurrentDeptEmp
	// CurrentDeptEmpHook is the signature for custom CurrentDeptEmp hook methods
	CurrentDeptEmpHook func(context.Context, boil.ContextExecutor, *CurrentDeptEmp) error

	currentDeptEmpQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currentDeptEmpType           = reflect.TypeOf(&CurrentDeptEmp{})
	currentDeptEmpMapping        = queries.MakeStructMapping(currentDeptEmpType)
	currentDeptEmpInsertCacheMut sync.RWMutex
	currentDeptEmpInsertCache    = make(map[string]insertCache)
	currentDeptEmpUpdateCacheMut sync.RWMutex
	currentDeptEmpUpdateCache    = make(map[string]updateCache)
	currentDeptEmpUpsertCacheMut sync.RWMutex
	currentDeptEmpUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var currentDeptEmpAfterSelectHooks []CurrentDeptEmpHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CurrentDeptEmp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentDeptEmpAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrentDeptEmpHook registers your hook function for all future operations.
func AddCurrentDeptEmpHook(hookPoint boil.HookPoint, currentDeptEmpHook CurrentDeptEmpHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		currentDeptEmpAfterSelectHooks = append(currentDeptEmpAfterSelectHooks, currentDeptEmpHook)
	}
}

// One returns a single currentDeptEmp record from the query.
func (q currentDeptEmpQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CurrentDeptEmp, error) {
	o := &CurrentDeptEmp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for current_dept_emp")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CurrentDeptEmp records from the query.
func (q currentDeptEmpQuery) All(ctx context.Context, exec boil.ContextExecutor) (CurrentDeptEmpSlice, error) {
	var o []*CurrentDeptEmp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to CurrentDeptEmp slice")
	}

	if len(currentDeptEmpAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CurrentDeptEmp records in the query.
func (q currentDeptEmpQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count current_dept_emp rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q currentDeptEmpQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if current_dept_emp exists")
	}

	return count > 0, nil
}

// CurrentDeptEmps retrieves all the records using an executor.
func CurrentDeptEmps(mods ...qm.QueryMod) currentDeptEmpQuery {
	mods = append(mods, qm.From("`current_dept_emp`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`current_dept_emp`.*"})
	}

	return currentDeptEmpQuery{q}
}
