// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Salary is an object representing the database table.
type Salary struct {
	EmpNo    int       `boil:"emp_no" json:"emp_no" toml:"emp_no" yaml:"emp_no"`
	Salary   int       `boil:"salary" json:"salary" toml:"salary" yaml:"salary"`
	FromDate time.Time `boil:"from_date" json:"from_date" toml:"from_date" yaml:"from_date"`
	ToDate   time.Time `boil:"to_date" json:"to_date" toml:"to_date" yaml:"to_date"`

	R *salaryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L salaryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SalaryColumns = struct {
	EmpNo    string
	Salary   string
	FromDate string
	ToDate   string
}{
	EmpNo:    "emp_no",
	Salary:   "salary",
	FromDate: "from_date",
	ToDate:   "to_date",
}

var SalaryTableColumns = struct {
	EmpNo    string
	Salary   string
	FromDate string
	ToDate   string
}{
	EmpNo:    "salaries.emp_no",
	Salary:   "salaries.salary",
	FromDate: "salaries.from_date",
	ToDate:   "salaries.to_date",
}

// Generated where

var SalaryWhere = struct {
	EmpNo    whereHelperint
	Salary   whereHelperint
	FromDate whereHelpertime_Time
	ToDate   whereHelpertime_Time
}{
	EmpNo:    whereHelperint{field: "`salaries`.`emp_no`"},
	Salary:   whereHelperint{field: "`salaries`.`salary`"},
	FromDate: whereHelpertime_Time{field: "`salaries`.`from_date`"},
	ToDate:   whereHelpertime_Time{field: "`salaries`.`to_date`"},
}

// SalaryRels is where relationship names are stored.
var SalaryRels = struct {
	EmpNoEmployee string
}{
	EmpNoEmployee: "EmpNoEmployee",
}

// salaryR is where relationships are stored.
type salaryR struct {
	EmpNoEmployee *Employee `boil:"EmpNoEmployee" json:"EmpNoEmployee" toml:"EmpNoEmployee" yaml:"EmpNoEmployee"`
}

// NewStruct creates a new relationship struct
func (*salaryR) NewStruct() *salaryR {
	return &salaryR{}
}

func (r *salaryR) GetEmpNoEmployee() *Employee {
	if r == nil {
		return nil
	}
	return r.EmpNoEmployee
}

// salaryL is where Load methods for each relationship are stored.
type salaryL struct{}

var (
	salaryAllColumns            = []string{"emp_no", "salary", "from_date", "to_date"}
	salaryColumnsWithoutDefault = []string{"emp_no", "salary", "from_date", "to_date"}
	salaryColumnsWithDefault    = []string{}
	salaryPrimaryKeyColumns     = []string{"emp_no", "from_date"}
	salaryGeneratedColumns      = []string{}
)

type (
	// SalarySlice is an alias for a slice of pointers to Salary.
	// This should almost always be used instead of []Salary.
	SalarySlice []*Salary
	// SalaryHook is the signature for custom Salary hook methods
	SalaryHook func(context.Context, boil.ContextExecutor, *Salary) error

	salaryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	salaryType                 = reflect.TypeOf(&Salary{})
	salaryMapping              = queries.MakeStructMapping(salaryType)
	salaryPrimaryKeyMapping, _ = queries.BindMapping(salaryType, salaryMapping, salaryPrimaryKeyColumns)
	salaryInsertCacheMut       sync.RWMutex
	salaryInsertCache          = make(map[string]insertCache)
	salaryUpdateCacheMut       sync.RWMutex
	salaryUpdateCache          = make(map[string]updateCache)
	salaryUpsertCacheMut       sync.RWMutex
	salaryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var salaryAfterSelectHooks []SalaryHook

var salaryBeforeInsertHooks []SalaryHook
var salaryAfterInsertHooks []SalaryHook

var salaryBeforeUpdateHooks []SalaryHook
var salaryAfterUpdateHooks []SalaryHook

var salaryBeforeDeleteHooks []SalaryHook
var salaryAfterDeleteHooks []SalaryHook

var salaryBeforeUpsertHooks []SalaryHook
var salaryAfterUpsertHooks []SalaryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Salary) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Salary) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Salary) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Salary) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Salary) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Salary) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Salary) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Salary) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Salary) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range salaryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSalaryHook registers your hook function for all future operations.
func AddSalaryHook(hookPoint boil.HookPoint, salaryHook SalaryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		salaryAfterSelectHooks = append(salaryAfterSelectHooks, salaryHook)
	case boil.BeforeInsertHook:
		salaryBeforeInsertHooks = append(salaryBeforeInsertHooks, salaryHook)
	case boil.AfterInsertHook:
		salaryAfterInsertHooks = append(salaryAfterInsertHooks, salaryHook)
	case boil.BeforeUpdateHook:
		salaryBeforeUpdateHooks = append(salaryBeforeUpdateHooks, salaryHook)
	case boil.AfterUpdateHook:
		salaryAfterUpdateHooks = append(salaryAfterUpdateHooks, salaryHook)
	case boil.BeforeDeleteHook:
		salaryBeforeDeleteHooks = append(salaryBeforeDeleteHooks, salaryHook)
	case boil.AfterDeleteHook:
		salaryAfterDeleteHooks = append(salaryAfterDeleteHooks, salaryHook)
	case boil.BeforeUpsertHook:
		salaryBeforeUpsertHooks = append(salaryBeforeUpsertHooks, salaryHook)
	case boil.AfterUpsertHook:
		salaryAfterUpsertHooks = append(salaryAfterUpsertHooks, salaryHook)
	}
}

// One returns a single salary record from the query.
func (q salaryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Salary, error) {
	o := &Salary{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for salaries")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Salary records from the query.
func (q salaryQuery) All(ctx context.Context, exec boil.ContextExecutor) (SalarySlice, error) {
	var o []*Salary

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Salary slice")
	}

	if len(salaryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Salary records in the query.
func (q salaryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count salaries rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q salaryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if salaries exists")
	}

	return count > 0, nil
}

// EmpNoEmployee pointed to by the foreign key.
func (o *Salary) EmpNoEmployee(mods ...qm.QueryMod) employeeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`emp_no` = ?", o.EmpNo),
	}

	queryMods = append(queryMods, mods...)

	return Employees(queryMods...)
}

// LoadEmpNoEmployee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (salaryL) LoadEmpNoEmployee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSalary interface{}, mods queries.Applicator) error {
	var slice []*Salary
	var object *Salary

	if singular {
		var ok bool
		object, ok = maybeSalary.(*Salary)
		if !ok {
			object = new(Salary)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSalary)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSalary))
			}
		}
	} else {
		s, ok := maybeSalary.(*[]*Salary)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSalary)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSalary))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &salaryR{}
		}
		args = append(args, object.EmpNo)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &salaryR{}
			}

			for _, a := range args {
				if a == obj.EmpNo {
					continue Outer
				}
			}

			args = append(args, obj.EmpNo)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`employees`),
		qm.WhereIn(`employees.emp_no in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Employee")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Employee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employees")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EmpNoEmployee = foreign
		if foreign.R == nil {
			foreign.R = &employeeR{}
		}
		foreign.R.EmpNoSalaries = append(foreign.R.EmpNoSalaries, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EmpNo == foreign.EmpNo {
				local.R.EmpNoEmployee = foreign
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.EmpNoSalaries = append(foreign.R.EmpNoSalaries, local)
				break
			}
		}
	}

	return nil
}

// SetEmpNoEmployee of the salary to the related item.
// Sets o.R.EmpNoEmployee to related.
// Adds o to related.R.EmpNoSalaries.
func (o *Salary) SetEmpNoEmployee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Employee) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `salaries` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"emp_no"}),
		strmangle.WhereClause("`", "`", 0, salaryPrimaryKeyColumns),
	)
	values := []interface{}{related.EmpNo, o.EmpNo, o.FromDate}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EmpNo = related.EmpNo
	if o.R == nil {
		o.R = &salaryR{
			EmpNoEmployee: related,
		}
	} else {
		o.R.EmpNoEmployee = related
	}

	if related.R == nil {
		related.R = &employeeR{
			EmpNoSalaries: SalarySlice{o},
		}
	} else {
		related.R.EmpNoSalaries = append(related.R.EmpNoSalaries, o)
	}

	return nil
}

// Salaries retrieves all the records using an executor.
func Salaries(mods ...qm.QueryMod) salaryQuery {
	mods = append(mods, qm.From("`salaries`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`salaries`.*"})
	}

	return salaryQuery{q}
}

// FindSalary retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSalary(ctx context.Context, exec boil.ContextExecutor, empNo int, fromDate time.Time, selectCols ...string) (*Salary, error) {
	salaryObj := &Salary{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `salaries` where `emp_no`=? AND `from_date`=?", sel,
	)

	q := queries.Raw(query, empNo, fromDate)

	err := q.Bind(ctx, exec, salaryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from salaries")
	}

	if err = salaryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return salaryObj, err
	}

	return salaryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Salary) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no salaries provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salaryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	salaryInsertCacheMut.RLock()
	cache, cached := salaryInsertCache[key]
	salaryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			salaryAllColumns,
			salaryColumnsWithDefault,
			salaryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(salaryType, salaryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(salaryType, salaryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `salaries` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `salaries` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `salaries` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, salaryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into salaries")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.EmpNo,
		o.FromDate,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for salaries")
	}

CacheNoHooks:
	if !cached {
		salaryInsertCacheMut.Lock()
		salaryInsertCache[key] = cache
		salaryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Salary.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Salary) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	salaryUpdateCacheMut.RLock()
	cache, cached := salaryUpdateCache[key]
	salaryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			salaryAllColumns,
			salaryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update salaries, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `salaries` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, salaryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(salaryType, salaryMapping, append(wl, salaryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update salaries row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for salaries")
	}

	if !cached {
		salaryUpdateCacheMut.Lock()
		salaryUpdateCache[key] = cache
		salaryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q salaryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for salaries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for salaries")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SalarySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `salaries` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salaryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in salary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all salary")
	}
	return rowsAff, nil
}

var mySQLSalaryUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Salary) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no salaries provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(salaryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLSalaryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	salaryUpsertCacheMut.RLock()
	cache, cached := salaryUpsertCache[key]
	salaryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			salaryAllColumns,
			salaryColumnsWithDefault,
			salaryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			salaryAllColumns,
			salaryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert salaries, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`salaries`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `salaries` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(salaryType, salaryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(salaryType, salaryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for salaries")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(salaryType, salaryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for salaries")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for salaries")
	}

CacheNoHooks:
	if !cached {
		salaryUpsertCacheMut.Lock()
		salaryUpsertCache[key] = cache
		salaryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Salary record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Salary) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Salary provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), salaryPrimaryKeyMapping)
	sql := "DELETE FROM `salaries` WHERE `emp_no`=? AND `from_date`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from salaries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for salaries")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q salaryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no salaryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from salaries")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for salaries")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SalarySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(salaryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `salaries` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salaryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from salary slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for salaries")
	}

	if len(salaryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Salary) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSalary(ctx, exec, o.EmpNo, o.FromDate)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SalarySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SalarySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), salaryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `salaries`.* FROM `salaries` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, salaryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in SalarySlice")
	}

	*o = slice

	return nil
}

// SalaryExists checks if the Salary row exists.
func SalaryExists(ctx context.Context, exec boil.ContextExecutor, empNo int, fromDate time.Time) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `salaries` where `emp_no`=? AND `from_date`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, empNo, fromDate)
	}
	row := exec.QueryRowContext(ctx, sql, empNo, fromDate)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if salaries exists")
	}

	return exists, nil
}

// Exists checks if the Salary row exists.
func (o *Salary) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SalaryExists(ctx, exec, o.EmpNo, o.FromDate)
}
