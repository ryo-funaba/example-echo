// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeptEmpLatestDate is an object representing the database table.
type DeptEmpLatestDate struct {
	EmpNo    int       `boil:"emp_no" json:"emp_no" toml:"emp_no" yaml:"emp_no"`
	FromDate null.Time `boil:"from_date" json:"from_date,omitempty" toml:"from_date" yaml:"from_date,omitempty"`
	ToDate   null.Time `boil:"to_date" json:"to_date,omitempty" toml:"to_date" yaml:"to_date,omitempty"`
}

var DeptEmpLatestDateColumns = struct {
	EmpNo    string
	FromDate string
	ToDate   string
}{
	EmpNo:    "emp_no",
	FromDate: "from_date",
	ToDate:   "to_date",
}

var DeptEmpLatestDateTableColumns = struct {
	EmpNo    string
	FromDate string
	ToDate   string
}{
	EmpNo:    "dept_emp_latest_date.emp_no",
	FromDate: "dept_emp_latest_date.from_date",
	ToDate:   "dept_emp_latest_date.to_date",
}

// Generated where

var DeptEmpLatestDateWhere = struct {
	EmpNo    whereHelperint
	FromDate whereHelpernull_Time
	ToDate   whereHelpernull_Time
}{
	EmpNo:    whereHelperint{field: "`dept_emp_latest_date`.`emp_no`"},
	FromDate: whereHelpernull_Time{field: "`dept_emp_latest_date`.`from_date`"},
	ToDate:   whereHelpernull_Time{field: "`dept_emp_latest_date`.`to_date`"},
}

var (
	deptEmpLatestDateAllColumns            = []string{"emp_no", "from_date", "to_date"}
	deptEmpLatestDateColumnsWithoutDefault = []string{"emp_no", "from_date", "to_date"}
	deptEmpLatestDateColumnsWithDefault    = []string{}
	deptEmpLatestDatePrimaryKeyColumns     = []string{}
	deptEmpLatestDateGeneratedColumns      = []string{}
)

type (
	// DeptEmpLatestDateSlice is an alias for a slice of pointers to DeptEmpLatestDate.
	// This should almost always be used instead of []DeptEmpLatestDate.
	DeptEmpLatestDateSlice []*DeptEmpLatestDate
	// DeptEmpLatestDateHook is the signature for custom DeptEmpLatestDate hook methods
	DeptEmpLatestDateHook func(context.Context, boil.ContextExecutor, *DeptEmpLatestDate) error

	deptEmpLatestDateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deptEmpLatestDateType           = reflect.TypeOf(&DeptEmpLatestDate{})
	deptEmpLatestDateMapping        = queries.MakeStructMapping(deptEmpLatestDateType)
	deptEmpLatestDateInsertCacheMut sync.RWMutex
	deptEmpLatestDateInsertCache    = make(map[string]insertCache)
	deptEmpLatestDateUpdateCacheMut sync.RWMutex
	deptEmpLatestDateUpdateCache    = make(map[string]updateCache)
	deptEmpLatestDateUpsertCacheMut sync.RWMutex
	deptEmpLatestDateUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
	// These are used in some views
	_ = fmt.Sprintln("")
	_ = reflect.Int
	_ = strings.Builder{}
	_ = sync.Mutex{}
	_ = strmangle.Plural("")
	_ = strconv.IntSize
)

var deptEmpLatestDateAfterSelectHooks []DeptEmpLatestDateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeptEmpLatestDate) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deptEmpLatestDateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeptEmpLatestDateHook registers your hook function for all future operations.
func AddDeptEmpLatestDateHook(hookPoint boil.HookPoint, deptEmpLatestDateHook DeptEmpLatestDateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deptEmpLatestDateAfterSelectHooks = append(deptEmpLatestDateAfterSelectHooks, deptEmpLatestDateHook)
	}
}

// One returns a single deptEmpLatestDate record from the query.
func (q deptEmpLatestDateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeptEmpLatestDate, error) {
	o := &DeptEmpLatestDate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dept_emp_latest_date")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeptEmpLatestDate records from the query.
func (q deptEmpLatestDateQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeptEmpLatestDateSlice, error) {
	var o []*DeptEmpLatestDate

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DeptEmpLatestDate slice")
	}

	if len(deptEmpLatestDateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeptEmpLatestDate records in the query.
func (q deptEmpLatestDateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dept_emp_latest_date rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deptEmpLatestDateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dept_emp_latest_date exists")
	}

	return count > 0, nil
}

// DeptEmpLatestDates retrieves all the records using an executor.
func DeptEmpLatestDates(mods ...qm.QueryMod) deptEmpLatestDateQuery {
	mods = append(mods, qm.From("`dept_emp_latest_date`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`dept_emp_latest_date`.*"})
	}

	return deptEmpLatestDateQuery{q}
}
