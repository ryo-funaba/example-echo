// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DeptEmp is an object representing the database table.
type DeptEmp struct {
	EmpNo    int       `boil:"emp_no" json:"emp_no" toml:"emp_no" yaml:"emp_no"`
	DeptNo   string    `boil:"dept_no" json:"dept_no" toml:"dept_no" yaml:"dept_no"`
	FromDate time.Time `boil:"from_date" json:"from_date" toml:"from_date" yaml:"from_date"`
	ToDate   time.Time `boil:"to_date" json:"to_date" toml:"to_date" yaml:"to_date"`

	R *deptEmpR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L deptEmpL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DeptEmpColumns = struct {
	EmpNo    string
	DeptNo   string
	FromDate string
	ToDate   string
}{
	EmpNo:    "emp_no",
	DeptNo:   "dept_no",
	FromDate: "from_date",
	ToDate:   "to_date",
}

var DeptEmpTableColumns = struct {
	EmpNo    string
	DeptNo   string
	FromDate string
	ToDate   string
}{
	EmpNo:    "dept_emp.emp_no",
	DeptNo:   "dept_emp.dept_no",
	FromDate: "dept_emp.from_date",
	ToDate:   "dept_emp.to_date",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var DeptEmpWhere = struct {
	EmpNo    whereHelperint
	DeptNo   whereHelperstring
	FromDate whereHelpertime_Time
	ToDate   whereHelpertime_Time
}{
	EmpNo:    whereHelperint{field: "`dept_emp`.`emp_no`"},
	DeptNo:   whereHelperstring{field: "`dept_emp`.`dept_no`"},
	FromDate: whereHelpertime_Time{field: "`dept_emp`.`from_date`"},
	ToDate:   whereHelpertime_Time{field: "`dept_emp`.`to_date`"},
}

// DeptEmpRels is where relationship names are stored.
var DeptEmpRels = struct {
	EmpNoEmployee    string
	DeptNoDepartment string
}{
	EmpNoEmployee:    "EmpNoEmployee",
	DeptNoDepartment: "DeptNoDepartment",
}

// deptEmpR is where relationships are stored.
type deptEmpR struct {
	EmpNoEmployee    *Employee   `boil:"EmpNoEmployee" json:"EmpNoEmployee" toml:"EmpNoEmployee" yaml:"EmpNoEmployee"`
	DeptNoDepartment *Department `boil:"DeptNoDepartment" json:"DeptNoDepartment" toml:"DeptNoDepartment" yaml:"DeptNoDepartment"`
}

// NewStruct creates a new relationship struct
func (*deptEmpR) NewStruct() *deptEmpR {
	return &deptEmpR{}
}

func (r *deptEmpR) GetEmpNoEmployee() *Employee {
	if r == nil {
		return nil
	}
	return r.EmpNoEmployee
}

func (r *deptEmpR) GetDeptNoDepartment() *Department {
	if r == nil {
		return nil
	}
	return r.DeptNoDepartment
}

// deptEmpL is where Load methods for each relationship are stored.
type deptEmpL struct{}

var (
	deptEmpAllColumns            = []string{"emp_no", "dept_no", "from_date", "to_date"}
	deptEmpColumnsWithoutDefault = []string{"emp_no", "dept_no", "from_date", "to_date"}
	deptEmpColumnsWithDefault    = []string{}
	deptEmpPrimaryKeyColumns     = []string{"emp_no", "dept_no"}
	deptEmpGeneratedColumns      = []string{}
)

type (
	// DeptEmpSlice is an alias for a slice of pointers to DeptEmp.
	// This should almost always be used instead of []DeptEmp.
	DeptEmpSlice []*DeptEmp
	// DeptEmpHook is the signature for custom DeptEmp hook methods
	DeptEmpHook func(context.Context, boil.ContextExecutor, *DeptEmp) error

	deptEmpQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	deptEmpType                 = reflect.TypeOf(&DeptEmp{})
	deptEmpMapping              = queries.MakeStructMapping(deptEmpType)
	deptEmpPrimaryKeyMapping, _ = queries.BindMapping(deptEmpType, deptEmpMapping, deptEmpPrimaryKeyColumns)
	deptEmpInsertCacheMut       sync.RWMutex
	deptEmpInsertCache          = make(map[string]insertCache)
	deptEmpUpdateCacheMut       sync.RWMutex
	deptEmpUpdateCache          = make(map[string]updateCache)
	deptEmpUpsertCacheMut       sync.RWMutex
	deptEmpUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var deptEmpAfterSelectHooks []DeptEmpHook

var deptEmpBeforeInsertHooks []DeptEmpHook
var deptEmpAfterInsertHooks []DeptEmpHook

var deptEmpBeforeUpdateHooks []DeptEmpHook
var deptEmpAfterUpdateHooks []DeptEmpHook

var deptEmpBeforeDeleteHooks []DeptEmpHook
var deptEmpAfterDeleteHooks []DeptEmpHook

var deptEmpBeforeUpsertHooks []DeptEmpHook
var deptEmpAfterUpsertHooks []DeptEmpHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DeptEmp) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deptEmpAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DeptEmp) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deptEmpBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DeptEmp) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deptEmpAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DeptEmp) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deptEmpBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DeptEmp) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deptEmpAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DeptEmp) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deptEmpBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DeptEmp) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deptEmpAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DeptEmp) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deptEmpBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DeptEmp) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range deptEmpAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDeptEmpHook registers your hook function for all future operations.
func AddDeptEmpHook(hookPoint boil.HookPoint, deptEmpHook DeptEmpHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		deptEmpAfterSelectHooks = append(deptEmpAfterSelectHooks, deptEmpHook)
	case boil.BeforeInsertHook:
		deptEmpBeforeInsertHooks = append(deptEmpBeforeInsertHooks, deptEmpHook)
	case boil.AfterInsertHook:
		deptEmpAfterInsertHooks = append(deptEmpAfterInsertHooks, deptEmpHook)
	case boil.BeforeUpdateHook:
		deptEmpBeforeUpdateHooks = append(deptEmpBeforeUpdateHooks, deptEmpHook)
	case boil.AfterUpdateHook:
		deptEmpAfterUpdateHooks = append(deptEmpAfterUpdateHooks, deptEmpHook)
	case boil.BeforeDeleteHook:
		deptEmpBeforeDeleteHooks = append(deptEmpBeforeDeleteHooks, deptEmpHook)
	case boil.AfterDeleteHook:
		deptEmpAfterDeleteHooks = append(deptEmpAfterDeleteHooks, deptEmpHook)
	case boil.BeforeUpsertHook:
		deptEmpBeforeUpsertHooks = append(deptEmpBeforeUpsertHooks, deptEmpHook)
	case boil.AfterUpsertHook:
		deptEmpAfterUpsertHooks = append(deptEmpAfterUpsertHooks, deptEmpHook)
	}
}

// One returns a single deptEmp record from the query.
func (q deptEmpQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DeptEmp, error) {
	o := &DeptEmp{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for dept_emp")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DeptEmp records from the query.
func (q deptEmpQuery) All(ctx context.Context, exec boil.ContextExecutor) (DeptEmpSlice, error) {
	var o []*DeptEmp

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to DeptEmp slice")
	}

	if len(deptEmpAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DeptEmp records in the query.
func (q deptEmpQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count dept_emp rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q deptEmpQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if dept_emp exists")
	}

	return count > 0, nil
}

// EmpNoEmployee pointed to by the foreign key.
func (o *DeptEmp) EmpNoEmployee(mods ...qm.QueryMod) employeeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`emp_no` = ?", o.EmpNo),
	}

	queryMods = append(queryMods, mods...)

	return Employees(queryMods...)
}

// DeptNoDepartment pointed to by the foreign key.
func (o *DeptEmp) DeptNoDepartment(mods ...qm.QueryMod) departmentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`dept_no` = ?", o.DeptNo),
	}

	queryMods = append(queryMods, mods...)

	return Departments(queryMods...)
}

// LoadEmpNoEmployee allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deptEmpL) LoadEmpNoEmployee(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeptEmp interface{}, mods queries.Applicator) error {
	var slice []*DeptEmp
	var object *DeptEmp

	if singular {
		var ok bool
		object, ok = maybeDeptEmp.(*DeptEmp)
		if !ok {
			object = new(DeptEmp)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeptEmp)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeptEmp))
			}
		}
	} else {
		s, ok := maybeDeptEmp.(*[]*DeptEmp)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeptEmp)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeptEmp))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deptEmpR{}
		}
		args = append(args, object.EmpNo)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deptEmpR{}
			}

			for _, a := range args {
				if a == obj.EmpNo {
					continue Outer
				}
			}

			args = append(args, obj.EmpNo)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`employees`),
		qm.WhereIn(`employees.emp_no in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Employee")
	}

	var resultSlice []*Employee
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Employee")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for employees")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for employees")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.EmpNoEmployee = foreign
		if foreign.R == nil {
			foreign.R = &employeeR{}
		}
		foreign.R.EmpNoDeptEmps = append(foreign.R.EmpNoDeptEmps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EmpNo == foreign.EmpNo {
				local.R.EmpNoEmployee = foreign
				if foreign.R == nil {
					foreign.R = &employeeR{}
				}
				foreign.R.EmpNoDeptEmps = append(foreign.R.EmpNoDeptEmps, local)
				break
			}
		}
	}

	return nil
}

// LoadDeptNoDepartment allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (deptEmpL) LoadDeptNoDepartment(ctx context.Context, e boil.ContextExecutor, singular bool, maybeDeptEmp interface{}, mods queries.Applicator) error {
	var slice []*DeptEmp
	var object *DeptEmp

	if singular {
		var ok bool
		object, ok = maybeDeptEmp.(*DeptEmp)
		if !ok {
			object = new(DeptEmp)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeDeptEmp)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeDeptEmp))
			}
		}
	} else {
		s, ok := maybeDeptEmp.(*[]*DeptEmp)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeDeptEmp)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeDeptEmp))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &deptEmpR{}
		}
		args = append(args, object.DeptNo)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &deptEmpR{}
			}

			for _, a := range args {
				if a == obj.DeptNo {
					continue Outer
				}
			}

			args = append(args, obj.DeptNo)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`departments`),
		qm.WhereIn(`departments.dept_no in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Department")
	}

	var resultSlice []*Department
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Department")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for departments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for departments")
	}

	if len(departmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.DeptNoDepartment = foreign
		if foreign.R == nil {
			foreign.R = &departmentR{}
		}
		foreign.R.DeptNoDeptEmps = append(foreign.R.DeptNoDeptEmps, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DeptNo == foreign.DeptNo {
				local.R.DeptNoDepartment = foreign
				if foreign.R == nil {
					foreign.R = &departmentR{}
				}
				foreign.R.DeptNoDeptEmps = append(foreign.R.DeptNoDeptEmps, local)
				break
			}
		}
	}

	return nil
}

// SetEmpNoEmployee of the deptEmp to the related item.
// Sets o.R.EmpNoEmployee to related.
// Adds o to related.R.EmpNoDeptEmps.
func (o *DeptEmp) SetEmpNoEmployee(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Employee) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dept_emp` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"emp_no"}),
		strmangle.WhereClause("`", "`", 0, deptEmpPrimaryKeyColumns),
	)
	values := []interface{}{related.EmpNo, o.EmpNo, o.DeptNo}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EmpNo = related.EmpNo
	if o.R == nil {
		o.R = &deptEmpR{
			EmpNoEmployee: related,
		}
	} else {
		o.R.EmpNoEmployee = related
	}

	if related.R == nil {
		related.R = &employeeR{
			EmpNoDeptEmps: DeptEmpSlice{o},
		}
	} else {
		related.R.EmpNoDeptEmps = append(related.R.EmpNoDeptEmps, o)
	}

	return nil
}

// SetDeptNoDepartment of the deptEmp to the related item.
// Sets o.R.DeptNoDepartment to related.
// Adds o to related.R.DeptNoDeptEmps.
func (o *DeptEmp) SetDeptNoDepartment(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Department) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `dept_emp` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"dept_no"}),
		strmangle.WhereClause("`", "`", 0, deptEmpPrimaryKeyColumns),
	)
	values := []interface{}{related.DeptNo, o.EmpNo, o.DeptNo}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DeptNo = related.DeptNo
	if o.R == nil {
		o.R = &deptEmpR{
			DeptNoDepartment: related,
		}
	} else {
		o.R.DeptNoDepartment = related
	}

	if related.R == nil {
		related.R = &departmentR{
			DeptNoDeptEmps: DeptEmpSlice{o},
		}
	} else {
		related.R.DeptNoDeptEmps = append(related.R.DeptNoDeptEmps, o)
	}

	return nil
}

// DeptEmps retrieves all the records using an executor.
func DeptEmps(mods ...qm.QueryMod) deptEmpQuery {
	mods = append(mods, qm.From("`dept_emp`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`dept_emp`.*"})
	}

	return deptEmpQuery{q}
}

// FindDeptEmp retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDeptEmp(ctx context.Context, exec boil.ContextExecutor, empNo int, deptNo string, selectCols ...string) (*DeptEmp, error) {
	deptEmpObj := &DeptEmp{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `dept_emp` where `emp_no`=? AND `dept_no`=?", sel,
	)

	q := queries.Raw(query, empNo, deptNo)

	err := q.Bind(ctx, exec, deptEmpObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from dept_emp")
	}

	if err = deptEmpObj.doAfterSelectHooks(ctx, exec); err != nil {
		return deptEmpObj, err
	}

	return deptEmpObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DeptEmp) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dept_emp provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deptEmpColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	deptEmpInsertCacheMut.RLock()
	cache, cached := deptEmpInsertCache[key]
	deptEmpInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			deptEmpAllColumns,
			deptEmpColumnsWithDefault,
			deptEmpColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(deptEmpType, deptEmpMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(deptEmpType, deptEmpMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `dept_emp` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `dept_emp` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `dept_emp` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, deptEmpPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into dept_emp")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.EmpNo,
		o.DeptNo,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dept_emp")
	}

CacheNoHooks:
	if !cached {
		deptEmpInsertCacheMut.Lock()
		deptEmpInsertCache[key] = cache
		deptEmpInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DeptEmp.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DeptEmp) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	deptEmpUpdateCacheMut.RLock()
	cache, cached := deptEmpUpdateCache[key]
	deptEmpUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			deptEmpAllColumns,
			deptEmpPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update dept_emp, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `dept_emp` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, deptEmpPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(deptEmpType, deptEmpMapping, append(wl, deptEmpPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update dept_emp row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for dept_emp")
	}

	if !cached {
		deptEmpUpdateCacheMut.Lock()
		deptEmpUpdateCache[key] = cache
		deptEmpUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q deptEmpQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for dept_emp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for dept_emp")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DeptEmpSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deptEmpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `dept_emp` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deptEmpPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in deptEmp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all deptEmp")
	}
	return rowsAff, nil
}

var mySQLDeptEmpUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DeptEmp) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no dept_emp provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(deptEmpColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLDeptEmpUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	deptEmpUpsertCacheMut.RLock()
	cache, cached := deptEmpUpsertCache[key]
	deptEmpUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			deptEmpAllColumns,
			deptEmpColumnsWithDefault,
			deptEmpColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			deptEmpAllColumns,
			deptEmpPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert dept_emp, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`dept_emp`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `dept_emp` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(deptEmpType, deptEmpMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(deptEmpType, deptEmpMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for dept_emp")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(deptEmpType, deptEmpMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for dept_emp")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for dept_emp")
	}

CacheNoHooks:
	if !cached {
		deptEmpUpsertCacheMut.Lock()
		deptEmpUpsertCache[key] = cache
		deptEmpUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DeptEmp record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DeptEmp) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no DeptEmp provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), deptEmpPrimaryKeyMapping)
	sql := "DELETE FROM `dept_emp` WHERE `emp_no`=? AND `dept_no`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from dept_emp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for dept_emp")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q deptEmpQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no deptEmpQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from dept_emp")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dept_emp")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DeptEmpSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(deptEmpBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deptEmpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `dept_emp` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deptEmpPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from deptEmp slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for dept_emp")
	}

	if len(deptEmpAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DeptEmp) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDeptEmp(ctx, exec, o.EmpNo, o.DeptNo)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DeptEmpSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DeptEmpSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), deptEmpPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `dept_emp`.* FROM `dept_emp` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, deptEmpPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in DeptEmpSlice")
	}

	*o = slice

	return nil
}

// DeptEmpExists checks if the DeptEmp row exists.
func DeptEmpExists(ctx context.Context, exec boil.ContextExecutor, empNo int, deptNo string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `dept_emp` where `emp_no`=? AND `dept_no`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, empNo, deptNo)
	}
	row := exec.QueryRowContext(ctx, sql, empNo, deptNo)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if dept_emp exists")
	}

	return exists, nil
}

// Exists checks if the DeptEmp row exists.
func (o *DeptEmp) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DeptEmpExists(ctx, exec, o.EmpNo, o.DeptNo)
}
