// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Employee is an object representing the database table.
type Employee struct {
	EmpNo     int             `boil:"emp_no" json:"emp_no" toml:"emp_no" yaml:"emp_no"`
	BirthDate time.Time       `boil:"birth_date" json:"birth_date" toml:"birth_date" yaml:"birth_date"`
	FirstName string          `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName  string          `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	Gender    EmployeesGender `boil:"gender" json:"gender" toml:"gender" yaml:"gender"`
	HireDate  time.Time       `boil:"hire_date" json:"hire_date" toml:"hire_date" yaml:"hire_date"`

	R *employeeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L employeeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmployeeColumns = struct {
	EmpNo     string
	BirthDate string
	FirstName string
	LastName  string
	Gender    string
	HireDate  string
}{
	EmpNo:     "emp_no",
	BirthDate: "birth_date",
	FirstName: "first_name",
	LastName:  "last_name",
	Gender:    "gender",
	HireDate:  "hire_date",
}

var EmployeeTableColumns = struct {
	EmpNo     string
	BirthDate string
	FirstName string
	LastName  string
	Gender    string
	HireDate  string
}{
	EmpNo:     "employees.emp_no",
	BirthDate: "employees.birth_date",
	FirstName: "employees.first_name",
	LastName:  "employees.last_name",
	Gender:    "employees.gender",
	HireDate:  "employees.hire_date",
}

// Generated where

type whereHelperEmployeesGender struct{ field string }

func (w whereHelperEmployeesGender) EQ(x EmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelperEmployeesGender) NEQ(x EmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelperEmployeesGender) LT(x EmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelperEmployeesGender) LTE(x EmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelperEmployeesGender) GT(x EmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelperEmployeesGender) GTE(x EmployeesGender) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelperEmployeesGender) IN(slice []EmployeesGender) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperEmployeesGender) NIN(slice []EmployeesGender) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var EmployeeWhere = struct {
	EmpNo     whereHelperint
	BirthDate whereHelpertime_Time
	FirstName whereHelperstring
	LastName  whereHelperstring
	Gender    whereHelperEmployeesGender
	HireDate  whereHelpertime_Time
}{
	EmpNo:     whereHelperint{field: "`employees`.`emp_no`"},
	BirthDate: whereHelpertime_Time{field: "`employees`.`birth_date`"},
	FirstName: whereHelperstring{field: "`employees`.`first_name`"},
	LastName:  whereHelperstring{field: "`employees`.`last_name`"},
	Gender:    whereHelperEmployeesGender{field: "`employees`.`gender`"},
	HireDate:  whereHelpertime_Time{field: "`employees`.`hire_date`"},
}

// EmployeeRels is where relationship names are stored.
var EmployeeRels = struct {
	EmpNoDeptEmps     string
	EmpNoDeptManagers string
	EmpNoSalaries     string
	EmpNoTitles       string
}{
	EmpNoDeptEmps:     "EmpNoDeptEmps",
	EmpNoDeptManagers: "EmpNoDeptManagers",
	EmpNoSalaries:     "EmpNoSalaries",
	EmpNoTitles:       "EmpNoTitles",
}

// employeeR is where relationships are stored.
type employeeR struct {
	EmpNoDeptEmps     DeptEmpSlice     `boil:"EmpNoDeptEmps" json:"EmpNoDeptEmps" toml:"EmpNoDeptEmps" yaml:"EmpNoDeptEmps"`
	EmpNoDeptManagers DeptManagerSlice `boil:"EmpNoDeptManagers" json:"EmpNoDeptManagers" toml:"EmpNoDeptManagers" yaml:"EmpNoDeptManagers"`
	EmpNoSalaries     SalarySlice      `boil:"EmpNoSalaries" json:"EmpNoSalaries" toml:"EmpNoSalaries" yaml:"EmpNoSalaries"`
	EmpNoTitles       TitleSlice       `boil:"EmpNoTitles" json:"EmpNoTitles" toml:"EmpNoTitles" yaml:"EmpNoTitles"`
}

// NewStruct creates a new relationship struct
func (*employeeR) NewStruct() *employeeR {
	return &employeeR{}
}

func (r *employeeR) GetEmpNoDeptEmps() DeptEmpSlice {
	if r == nil {
		return nil
	}
	return r.EmpNoDeptEmps
}

func (r *employeeR) GetEmpNoDeptManagers() DeptManagerSlice {
	if r == nil {
		return nil
	}
	return r.EmpNoDeptManagers
}

func (r *employeeR) GetEmpNoSalaries() SalarySlice {
	if r == nil {
		return nil
	}
	return r.EmpNoSalaries
}

func (r *employeeR) GetEmpNoTitles() TitleSlice {
	if r == nil {
		return nil
	}
	return r.EmpNoTitles
}

// employeeL is where Load methods for each relationship are stored.
type employeeL struct{}

var (
	employeeAllColumns            = []string{"emp_no", "birth_date", "first_name", "last_name", "gender", "hire_date"}
	employeeColumnsWithoutDefault = []string{"emp_no", "birth_date", "first_name", "last_name", "gender", "hire_date"}
	employeeColumnsWithDefault    = []string{}
	employeePrimaryKeyColumns     = []string{"emp_no"}
	employeeGeneratedColumns      = []string{}
)

type (
	// EmployeeSlice is an alias for a slice of pointers to Employee.
	// This should almost always be used instead of []Employee.
	EmployeeSlice []*Employee
	// EmployeeHook is the signature for custom Employee hook methods
	EmployeeHook func(context.Context, boil.ContextExecutor, *Employee) error

	employeeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	employeeType                 = reflect.TypeOf(&Employee{})
	employeeMapping              = queries.MakeStructMapping(employeeType)
	employeePrimaryKeyMapping, _ = queries.BindMapping(employeeType, employeeMapping, employeePrimaryKeyColumns)
	employeeInsertCacheMut       sync.RWMutex
	employeeInsertCache          = make(map[string]insertCache)
	employeeUpdateCacheMut       sync.RWMutex
	employeeUpdateCache          = make(map[string]updateCache)
	employeeUpsertCacheMut       sync.RWMutex
	employeeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var employeeAfterSelectHooks []EmployeeHook

var employeeBeforeInsertHooks []EmployeeHook
var employeeAfterInsertHooks []EmployeeHook

var employeeBeforeUpdateHooks []EmployeeHook
var employeeAfterUpdateHooks []EmployeeHook

var employeeBeforeDeleteHooks []EmployeeHook
var employeeAfterDeleteHooks []EmployeeHook

var employeeBeforeUpsertHooks []EmployeeHook
var employeeAfterUpsertHooks []EmployeeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Employee) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Employee) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Employee) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Employee) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Employee) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Employee) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Employee) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Employee) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Employee) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range employeeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmployeeHook registers your hook function for all future operations.
func AddEmployeeHook(hookPoint boil.HookPoint, employeeHook EmployeeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		employeeAfterSelectHooks = append(employeeAfterSelectHooks, employeeHook)
	case boil.BeforeInsertHook:
		employeeBeforeInsertHooks = append(employeeBeforeInsertHooks, employeeHook)
	case boil.AfterInsertHook:
		employeeAfterInsertHooks = append(employeeAfterInsertHooks, employeeHook)
	case boil.BeforeUpdateHook:
		employeeBeforeUpdateHooks = append(employeeBeforeUpdateHooks, employeeHook)
	case boil.AfterUpdateHook:
		employeeAfterUpdateHooks = append(employeeAfterUpdateHooks, employeeHook)
	case boil.BeforeDeleteHook:
		employeeBeforeDeleteHooks = append(employeeBeforeDeleteHooks, employeeHook)
	case boil.AfterDeleteHook:
		employeeAfterDeleteHooks = append(employeeAfterDeleteHooks, employeeHook)
	case boil.BeforeUpsertHook:
		employeeBeforeUpsertHooks = append(employeeBeforeUpsertHooks, employeeHook)
	case boil.AfterUpsertHook:
		employeeAfterUpsertHooks = append(employeeAfterUpsertHooks, employeeHook)
	}
}

// One returns a single employee record from the query.
func (q employeeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Employee, error) {
	o := &Employee{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for employees")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Employee records from the query.
func (q employeeQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmployeeSlice, error) {
	var o []*Employee

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to Employee slice")
	}

	if len(employeeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Employee records in the query.
func (q employeeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count employees rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q employeeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if employees exists")
	}

	return count > 0, nil
}

// EmpNoDeptEmps retrieves all the dept_emp's DeptEmps with an executor via emp_no column.
func (o *Employee) EmpNoDeptEmps(mods ...qm.QueryMod) deptEmpQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dept_emp`.`emp_no`=?", o.EmpNo),
	)

	return DeptEmps(queryMods...)
}

// EmpNoDeptManagers retrieves all the dept_manager's DeptManagers with an executor via emp_no column.
func (o *Employee) EmpNoDeptManagers(mods ...qm.QueryMod) deptManagerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`dept_manager`.`emp_no`=?", o.EmpNo),
	)

	return DeptManagers(queryMods...)
}

// EmpNoSalaries retrieves all the salary's Salaries with an executor via emp_no column.
func (o *Employee) EmpNoSalaries(mods ...qm.QueryMod) salaryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`salaries`.`emp_no`=?", o.EmpNo),
	)

	return Salaries(queryMods...)
}

// EmpNoTitles retrieves all the title's Titles with an executor via emp_no column.
func (o *Employee) EmpNoTitles(mods ...qm.QueryMod) titleQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`titles`.`emp_no`=?", o.EmpNo),
	)

	return Titles(queryMods...)
}

// LoadEmpNoDeptEmps allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadEmpNoDeptEmps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		var ok bool
		object, ok = maybeEmployee.(*Employee)
		if !ok {
			object = new(Employee)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEmployee))
			}
		}
	} else {
		s, ok := maybeEmployee.(*[]*Employee)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEmployee))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.EmpNo)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if a == obj.EmpNo {
					continue Outer
				}
			}

			args = append(args, obj.EmpNo)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dept_emp`),
		qm.WhereIn(`dept_emp.emp_no in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dept_emp")
	}

	var resultSlice []*DeptEmp
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dept_emp")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dept_emp")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dept_emp")
	}

	if len(deptEmpAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EmpNoDeptEmps = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deptEmpR{}
			}
			foreign.R.EmpNoEmployee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.EmpNo == foreign.EmpNo {
				local.R.EmpNoDeptEmps = append(local.R.EmpNoDeptEmps, foreign)
				if foreign.R == nil {
					foreign.R = &deptEmpR{}
				}
				foreign.R.EmpNoEmployee = local
				break
			}
		}
	}

	return nil
}

// LoadEmpNoDeptManagers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadEmpNoDeptManagers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		var ok bool
		object, ok = maybeEmployee.(*Employee)
		if !ok {
			object = new(Employee)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEmployee))
			}
		}
	} else {
		s, ok := maybeEmployee.(*[]*Employee)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEmployee))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.EmpNo)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if a == obj.EmpNo {
					continue Outer
				}
			}

			args = append(args, obj.EmpNo)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`dept_manager`),
		qm.WhereIn(`dept_manager.emp_no in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load dept_manager")
	}

	var resultSlice []*DeptManager
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice dept_manager")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on dept_manager")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for dept_manager")
	}

	if len(deptManagerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EmpNoDeptManagers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &deptManagerR{}
			}
			foreign.R.EmpNoEmployee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.EmpNo == foreign.EmpNo {
				local.R.EmpNoDeptManagers = append(local.R.EmpNoDeptManagers, foreign)
				if foreign.R == nil {
					foreign.R = &deptManagerR{}
				}
				foreign.R.EmpNoEmployee = local
				break
			}
		}
	}

	return nil
}

// LoadEmpNoSalaries allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadEmpNoSalaries(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		var ok bool
		object, ok = maybeEmployee.(*Employee)
		if !ok {
			object = new(Employee)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEmployee))
			}
		}
	} else {
		s, ok := maybeEmployee.(*[]*Employee)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEmployee))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.EmpNo)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if a == obj.EmpNo {
					continue Outer
				}
			}

			args = append(args, obj.EmpNo)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`salaries`),
		qm.WhereIn(`salaries.emp_no in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load salaries")
	}

	var resultSlice []*Salary
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice salaries")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on salaries")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for salaries")
	}

	if len(salaryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EmpNoSalaries = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &salaryR{}
			}
			foreign.R.EmpNoEmployee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.EmpNo == foreign.EmpNo {
				local.R.EmpNoSalaries = append(local.R.EmpNoSalaries, foreign)
				if foreign.R == nil {
					foreign.R = &salaryR{}
				}
				foreign.R.EmpNoEmployee = local
				break
			}
		}
	}

	return nil
}

// LoadEmpNoTitles allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (employeeL) LoadEmpNoTitles(ctx context.Context, e boil.ContextExecutor, singular bool, maybeEmployee interface{}, mods queries.Applicator) error {
	var slice []*Employee
	var object *Employee

	if singular {
		var ok bool
		object, ok = maybeEmployee.(*Employee)
		if !ok {
			object = new(Employee)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeEmployee))
			}
		}
	} else {
		s, ok := maybeEmployee.(*[]*Employee)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeEmployee)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeEmployee))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &employeeR{}
		}
		args = append(args, object.EmpNo)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &employeeR{}
			}

			for _, a := range args {
				if a == obj.EmpNo {
					continue Outer
				}
			}

			args = append(args, obj.EmpNo)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`titles`),
		qm.WhereIn(`titles.emp_no in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load titles")
	}

	var resultSlice []*Title
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice titles")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on titles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for titles")
	}

	if len(titleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.EmpNoTitles = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &titleR{}
			}
			foreign.R.EmpNoEmployee = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.EmpNo == foreign.EmpNo {
				local.R.EmpNoTitles = append(local.R.EmpNoTitles, foreign)
				if foreign.R == nil {
					foreign.R = &titleR{}
				}
				foreign.R.EmpNoEmployee = local
				break
			}
		}
	}

	return nil
}

// AddEmpNoDeptEmps adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.EmpNoDeptEmps.
// Sets related.R.EmpNoEmployee appropriately.
func (o *Employee) AddEmpNoDeptEmps(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeptEmp) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EmpNo = o.EmpNo
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dept_emp` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"emp_no"}),
				strmangle.WhereClause("`", "`", 0, deptEmpPrimaryKeyColumns),
			)
			values := []interface{}{o.EmpNo, rel.EmpNo, rel.DeptNo}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EmpNo = o.EmpNo
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			EmpNoDeptEmps: related,
		}
	} else {
		o.R.EmpNoDeptEmps = append(o.R.EmpNoDeptEmps, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deptEmpR{
				EmpNoEmployee: o,
			}
		} else {
			rel.R.EmpNoEmployee = o
		}
	}
	return nil
}

// AddEmpNoDeptManagers adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.EmpNoDeptManagers.
// Sets related.R.EmpNoEmployee appropriately.
func (o *Employee) AddEmpNoDeptManagers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*DeptManager) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EmpNo = o.EmpNo
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `dept_manager` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"emp_no"}),
				strmangle.WhereClause("`", "`", 0, deptManagerPrimaryKeyColumns),
			)
			values := []interface{}{o.EmpNo, rel.EmpNo, rel.DeptNo}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EmpNo = o.EmpNo
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			EmpNoDeptManagers: related,
		}
	} else {
		o.R.EmpNoDeptManagers = append(o.R.EmpNoDeptManagers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &deptManagerR{
				EmpNoEmployee: o,
			}
		} else {
			rel.R.EmpNoEmployee = o
		}
	}
	return nil
}

// AddEmpNoSalaries adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.EmpNoSalaries.
// Sets related.R.EmpNoEmployee appropriately.
func (o *Employee) AddEmpNoSalaries(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Salary) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EmpNo = o.EmpNo
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `salaries` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"emp_no"}),
				strmangle.WhereClause("`", "`", 0, salaryPrimaryKeyColumns),
			)
			values := []interface{}{o.EmpNo, rel.EmpNo, rel.FromDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EmpNo = o.EmpNo
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			EmpNoSalaries: related,
		}
	} else {
		o.R.EmpNoSalaries = append(o.R.EmpNoSalaries, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &salaryR{
				EmpNoEmployee: o,
			}
		} else {
			rel.R.EmpNoEmployee = o
		}
	}
	return nil
}

// AddEmpNoTitles adds the given related objects to the existing relationships
// of the employee, optionally inserting them as new records.
// Appends related to o.R.EmpNoTitles.
// Sets related.R.EmpNoEmployee appropriately.
func (o *Employee) AddEmpNoTitles(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Title) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.EmpNo = o.EmpNo
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `titles` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"emp_no"}),
				strmangle.WhereClause("`", "`", 0, titlePrimaryKeyColumns),
			)
			values := []interface{}{o.EmpNo, rel.EmpNo, rel.Title, rel.FromDate}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.EmpNo = o.EmpNo
		}
	}

	if o.R == nil {
		o.R = &employeeR{
			EmpNoTitles: related,
		}
	} else {
		o.R.EmpNoTitles = append(o.R.EmpNoTitles, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &titleR{
				EmpNoEmployee: o,
			}
		} else {
			rel.R.EmpNoEmployee = o
		}
	}
	return nil
}

// Employees retrieves all the records using an executor.
func Employees(mods ...qm.QueryMod) employeeQuery {
	mods = append(mods, qm.From("`employees`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`employees`.*"})
	}

	return employeeQuery{q}
}

// FindEmployee retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmployee(ctx context.Context, exec boil.ContextExecutor, empNo int, selectCols ...string) (*Employee, error) {
	employeeObj := &Employee{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `employees` where `emp_no`=?", sel,
	)

	q := queries.Raw(query, empNo)

	err := q.Bind(ctx, exec, employeeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from employees")
	}

	if err = employeeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return employeeObj, err
	}

	return employeeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Employee) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no employees provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	employeeInsertCacheMut.RLock()
	cache, cached := employeeInsertCache[key]
	employeeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `employees` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `employees` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `employees` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, employeePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into employees")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.EmpNo,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for employees")
	}

CacheNoHooks:
	if !cached {
		employeeInsertCacheMut.Lock()
		employeeInsertCache[key] = cache
		employeeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Employee.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Employee) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	employeeUpdateCacheMut.RLock()
	cache, cached := employeeUpdateCache[key]
	employeeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update employees, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `employees` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, employeePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, append(wl, employeePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update employees row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for employees")
	}

	if !cached {
		employeeUpdateCacheMut.Lock()
		employeeUpdateCache[key] = cache
		employeeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q employeeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for employees")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmployeeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `employees` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all employee")
	}
	return rowsAff, nil
}

var mySQLEmployeeUniqueColumns = []string{
	"emp_no",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Employee) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no employees provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(employeeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEmployeeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	employeeUpsertCacheMut.RLock()
	cache, cached := employeeUpsertCache[key]
	employeeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			employeeAllColumns,
			employeeColumnsWithDefault,
			employeeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			employeeAllColumns,
			employeePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert employees, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`employees`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `employees` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(employeeType, employeeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(employeeType, employeeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for employees")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(employeeType, employeeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for employees")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for employees")
	}

CacheNoHooks:
	if !cached {
		employeeUpsertCacheMut.Lock()
		employeeUpsertCache[key] = cache
		employeeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Employee record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Employee) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no Employee provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), employeePrimaryKeyMapping)
	sql := "DELETE FROM `employees` WHERE `emp_no`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for employees")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q employeeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no employeeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from employees")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for employees")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmployeeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(employeeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `employees` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from employee slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for employees")
	}

	if len(employeeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Employee) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmployee(ctx, exec, o.EmpNo)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmployeeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmployeeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), employeePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `employees`.* FROM `employees` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, employeePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in EmployeeSlice")
	}

	*o = slice

	return nil
}

// EmployeeExists checks if the Employee row exists.
func EmployeeExists(ctx context.Context, exec boil.ContextExecutor, empNo int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `employees` where `emp_no`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, empNo)
	}
	row := exec.QueryRowContext(ctx, sql, empNo)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if employees exists")
	}

	return exists, nil
}

// Exists checks if the Employee row exists.
func (o *Employee) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EmployeeExists(ctx, exec, o.EmpNo)
}
